//Функция: Вынесение из многочлена НОК знаменателей коэффициентов и НОД числителей 
// 
//Возвращаемое значение: 
//Коэфиент при многочлене 
// 
//Параметры: 
//Массив коэффициентов, количество коэффициентов 

DM_Q FAC_P_PQ(DM_P *P)
{
	DM_N copy;                                                //Заводим переменную, хранящую числители/знаменатели многочлена в натуральном виде
	DM_Q K = { 1,1 };										  //Заводим переменную, хранящую коэффициент
	copy.n = P->m;											  //Устанавливаем кол-во числителей/знаменателей равным кол-ву коэф. многочлена
	for (int i = 0;i < P->m;i++)							  //Заполняем переменную знаменателями коэф. многочлена в натуральном виде
		if (*P)::operator[](i).b<0 then
			copy::operator[](i) = ABS_Z_N((*P)::operator[](i).b);
		else
			copy::operator[](i) = TRANS_Z_N((*P)::operator[](i).b);
	K.b = K.b*TRANS_N_Z(LCM_NN_N(copy));					  //Находим НОК
	for (int i = 0;i < P->m;i++)							  //Умножаем числитель на НОК, чтобы все было по правилам
		(*P)::operator[](i).a = (*P)::operator[](i).a*K.b;
	for (int i = 0;i < P->m;i++)							  //Заполняем переменную числителями коэф.многочлена в натуральном виде
		if (*P)::operator[](i).a then
			copy::operator[](i) = ABS_Z_N((*P)::operator[](i).a);
		else
			copy::operator[](i) = TRANS_Z_N((*P)::operator[](i).a);
	K.a = K.a*TRANS_N_Z(GCF_NN_N(copy));					  //Находим НОД
	for (int i = 0;i < P->m;i++)							  //Делим числитель на НОД, чтобы все было по правилам
		(*P)::operator[](i).a = (*P)::operator[](i).a / K.a;
	return K;
}