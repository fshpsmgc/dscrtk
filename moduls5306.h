#pragma once

#include "stdafx.h"
#include "DataTypes.h"

#ifndef moduls5306
#define moduls5306

//Легенда
/*
"Описание функции"		//(Статус)(Кем сделано) Назначение функции
*/

//===Сидоров===
int COM_NN_D(DM_N n1, DM_N n2);					//(Проверено)(by Сидоров) Функция для сравнения двух натуральных чисел
void MUL_Nk_N(DM_N &obj, unsigned short k);		//(Проверено)(by Сидоров) Функция для умножения натурального числа на 10 в степени k
DM_P DER_P_P(const DM_P &obj);					//(Проверено)(by Сидоров) Производная многочлена
DM_N ADD_NN_N(DM_N n1, DM_N n2);				//(Проверено)(by Сидоров) Сложение натуральных чисел (+)	

//===Ершов===
DM_Z TRANS_N_Z(DM_N nat);						//(Сделано)(by Ершов) Функция преобразования натурального числа в целое 
short unsigned int POZ_Z_D(DM_Z cel);			//(Сделано)(by Ершов) Функция определения положительности числа
void MUL_Zm_Z(DM_Z *cel);						//(Проверено)(by Ершов) Функция умножения целого числа на -1

//===Гуляев===
DM_Z SUB_ZZ_Z(DM_Z minuend, DM_Z subtrahend);	//(Сделано)(by Гуляев) Функция для вычитания целых чисел (Будет добавлено в перегрузку знака -)
DM_P ADD_P_PP(DM_P first_p, DM_P second_p);		//(Сделано)(by Гуляев) Сложение многочленов (Будет добавлено в перегрузку знака +)
DM_Q MUL_QQ_Q(DM_Q factor_a, DM_Q factor_b);	//(Сделано)(by Гуляев) Умножение дробей (Будет Добавлено в перегрузку знака *)
//void NMR_P_P(DM_P pol);						// Переобразования многочлена, кратные корни в простые

//===Томинг===
DM_N TRANS_Z_N(DM_Z zOld);						//(Сделано)(by Томинг) Преобразование целого неотрицательного в натуральное
DM_P DIV_PP_P(DM_P pDividend, DM_P pDivider);	//(Сделано)(by Томинг) Деление многочленов (Будет добавлено в перегрузку знака /)
DM_P MOD_PP_P(DM_P pDividend, DM_P pDivider);	//(Сделано)(by Томинг) Остаток от деления многочлена на многочлен при делении с остатком (%)
DM_P GCF_PP_P(DM_P pFirst, DM_P pSecond);		//(Сделано)(by Томинг) НОД многочленов

//===Ведмедь===
void SUB_NN_N(DM_N n1, DM_N n2);				//(Проверено)(by Ведмедь/Сидоров) Вычитание из первого большего натурального числа второго меньшего или равного				
void ADD_1N_N(DM_N &obj);						//(Проверено)(by Ведмедь) Добавление 1 к натуральному числу
bool NZER_N_B(DM_N obj);						//Проверка на ноль: если число не равно нулю, то «да» иначе «нет»

//===Вялков===
void MUL_ND_N(DM_N &obj, unsigned int i);		//(Проверено)(by Сидоров) Умножение натурального числа на цифру (DM_N * int)
DM_N MUL_NN_N(DM_N n1, DM_N n2);				//(Проверено)(by Сидоров) Умножение натуральных чисел (DM_N * DM_N)
DM_N SUB_NDN_N(DM_N n1, DM_N n2, unsigned k);	//Вычитание из натурального другого натурального, умноженного на цифру для случая с неотрицательным результатом

//===Гараев===
DM_N MOD_NN_N(DM_N n1, DM_N n2);				//Остаток от деления большего натурального числа на меньшее или равное натуральное с остатком (делитель отличен от нуля)
DM_N GCF_NN_N(DM_N n1, DM_N n2);				//НОД натуральных чисел
DM_N LCM_NN_N(DM_N n1, DM_N n2);				//НОК натуральных чисел

//===Диденко===
void DIV_NN_Dk();								//Вычисление первой цифры деления большего натурального на меньшее, домноженное на 10^k, где k - номер позиции этой цифры (номер считается с нуля)
DM_N DIV_NN_N(DM_N n1, DM_N n2);				//Частное от деления большего натурального числа на меньшее или равное натуральное с остатком (делитель отличен от нуля)
DM_N ABS_Z_N(DM_Z obj);							//Абсолютная величина числа, результат - натуральное

//===Жубр===
DM_Z ADD_ZZ_Z(DM_Z n1, DM_Z n2);				//Сложение целых чисел
DM_Z MUL_ZZ_Z(DM_Z n1, DM_Z n2);				//Умножение целых чисел
void DIV_ZZ_Z(DM_Z n1, DM_Z n2);				//Частное от деления большего целого числа на меньшее или равное натуральное с остатком (делитель отличен от нуля)

//===Колев===
DM_Z MOD_ZZ_Z(DM_Z n1, DM_Z n2);				//Остаток от деления большего целого числа на меньшее или равное натуральное с остатком (делитель отличен от нуля)
void RED_Q_Q(DM_Q &obj);						//Сокращение дроби
bool INT_Q_B(DM_Q obj);							//Проверка на целое, если рациональное число является целым, то «да», иначе «нет»

//===Лавров===
DM_Q TRAN_Z_Q(DM_Z obj);						//Преобразование целого в дробное
DM_Z TRAN_Q_Z(DM_Q obj);						//Преобразование дробного в целое (если знаменатель равен 1)
DM_Q ADD_QQ_Q(DM_Q n1, DM_Q n2);				//Сложение дробей

//===Мишанов===
DM_Q SUB_QQ_Q(DM_Q n1, DM_Q n2);				//Вычитание дробей
DM_Q DIV_QQ_Q(DM_Q n1, DM_Q n2);				//Деление дробей (делитель отличен от нуля)
DM_P SUB_PP_P(DM_P n1, DM_P n2);				//Вычитание многочленов

//===Тазеруалет===
DM_Q MUL_PQ_Q(DM_P obj);						//Умножение многочлена на рациональное число
DM_P MUL_Pxk_P(DM_P obj, unsigned k);			//Умножение многочлена на x^k
DM_Q LED_P_Q(DM_P obj);							//Старший коэффициент многочлена

//===Янаки===
DM_N DEG_P_N(DM_P obj);							//Степень многочлена
void FAC_P_PQ();								//Вынесение из многочлена НОК знаменателей коэффициентов и НОД числителей
DM_P MUL_PP_P(DM_P n1, DM_P n2);				//Умножение многочленов


#endif